
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

	# rtmp stat  
     	location /stat {  
       		rtmp_stat all;  
       		rtmp_stat_stylesheet stat.xsl;  
     	}
  
     	location /stat.xsl {  
       		# you can move stat.xsl to a different location  
       		root /home/pi/nginx-rtmp-module-1.1.7.10;  
     	}
  
     	# rtmp control  
     		location /control {  
       		rtmp_control all;  
     	}  

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

rtmp {  
   server {  
     listen 1935; 
     chunk_size 128;
     ping 30s;  
     notify_method get;  
     
	application screens{  
       		live on;

       	# You can push this stream to an external rtmp server while accessible locally.
       	# If you experience artefacts and delays on external server lower the bitrate.
       	# There seems to be a bug. When watching local stream and pushing to remote, the remote
       	# stream become really weird with random blocks and strange shadows.(consider 1 one for now)
       	# push rtmp://ip-address-external-rtmp/app/stream;  

       	# sample play/publish handlers  
       	#on_play http://localhost:80/on_play;  
       	#on_publish http://localhost:80/on_publish;  
       	# sample recorder  
       	#recorder rec1 {  
       	#  record all;  
       	#  record_interval 30s;  
       	#  record_path /tmp;  
       	#  record_unique on;  
       	#}  
       	# sample HLS  
       	#hls on;  
       	#hls_path /tmp/hls;  
       	#hls_sync 100ms;
     }

	application output{
		live on;
		record off;
		exec_push omxplayer -o hdmi --live rtmp://localhost/output/$name;
   }

	application output_recorder{
                live on;
		record all;
    		record_path /home/pi/Videos/;

    		recorder audio {
        		record audio;
        		record_suffix .audio.flv;
    		}

    		recorder chunked {
        		record all;
        		record_interval 15s;
        		record_path /home/pi/Videos/chunked;
    		}
                exec_push omxplayer -o hdmi --live rtmp://localhost/production/$name;
 	}
    }  
}  
